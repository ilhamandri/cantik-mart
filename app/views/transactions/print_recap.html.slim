#customer
  table#meta
    tr
      td.meta-head colspan="2" 
        b  
          | #{@search}
    tr
      td.meta-head User
      td 
        textarea #{current_user.name.to_s}
    tr
      td.meta-head *
      td 
        textarea #{current_user.level.to_s.gsub("_"," ").camelize} (#{current_user.store.name.to_s})
    tr
      td.meta-head Tanggal   
      td
        textarea #{DateTime.now.in_time_zone.to_s}


br
br
br



        

- if isLevel ["super_visi", "finance"]
  h2 CANTIK MART
  - stores = Store.where.not(store_type: "warehouse")
  - stores = [current_user.store] if !isFinance
  - stores.each do |store|
    - trxs = @transactions.where(store: store)
    - trx_last_timestamp = "Tidak ada transaksi"
    - trx_last_timestamp = trxs.order("created_at DESC").first.created_at if trxs.present?

    h3
      
    table#items
      tr
        th colspan="7"
          | #{store.name.upcase} ( #{trx_last_timestamp} )
      tr
        th Kasir
        th Tunai
        th Debit 
        th Kredit
        th QRIS
        th Total
        - if current_user.level != "super_visi"
          th Profit

      - User.where(id: trxs.pluck(:user_id).uniq).each do |user|       
        - cashier_trxs = trxs.where(user: user)
        tr
          td #{user.name.camelize}
          - cash = cashier_trxs.where(payment_type: "CASH").sum(:grand_total)- cashier_trxs.where(payment_type: "CASH").sum(:grand_total_coin)
          - debit = cashier_trxs.where(payment_type: "DEBIT").sum(:grand_total)- cashier_trxs.where(payment_type: "DEBIT").sum(:grand_total_coin)
          - credit = cashier_trxs.where(payment_type: "CREDIT").sum(:grand_total)- cashier_trxs.where(payment_type: "CREDIT").sum(:grand_total_coin)
          - qris = cashier_trxs.where(payment_type: "QRIS").sum(:grand_total)- cashier_trxs.where(payment_type: "QRIS").sum(:grand_total_coin)
          - grand_total = cashier_trxs.sum(:grand_total) - cashier_trxs.sum(:grand_total_coin)
          - hpp_total = cashier_trxs.sum(:hpp_total) - cashier_trxs.sum(:hpp_total_coin)
          - tax_total = cashier_trxs.sum(:tax) - cashier_trxs.sum(:tax_coin)

          td.number #{number_with_delimiter(cash.to_i, delimiter: ".", separator: ",")}
          td.number #{number_with_delimiter(debit.to_i, delimiter: ".", separator: ",")}
          td.number #{number_with_delimiter(credit.to_i, delimiter: ".", separator: ",")}
          td.number #{number_with_delimiter(qris.to_i, delimiter: ".", separator: ",")}
          td.number #{number_with_delimiter(grand_total.to_i, delimiter: ".", separator: ",")}
          - if current_user.level != "super_visi"
            td.number #{number_with_delimiter((grand_total-tax_total-hpp_total).to_i, delimiter: ".", separator: ",")}
      tr
        td.number 
        - cash_total = trxs.where(payment_type: "CASH").sum(:grand_total) - trxs.where(payment_type: "CASH").sum(:grand_total_coin)
        - debit_total = trxs.where(payment_type: "DEBIT",).sum(:grand_total) - trxs.where(payment_type: "DEBIT").sum(:grand_total_coin)
        - credit_total = trxs.where(payment_type: "CREDIT",).sum(:grand_total) - trxs.where(payment_type: "CREDIT").sum(:grand_total_coin)
        - qris_total = trxs.where(payment_type: "QRIS",).sum(:grand_total) - trxs.where(payment_type: "QRIS").sum(:grand_total_coin)
        - grand_total = trxs.sum(:grand_total) - trxs.sum(:grand_total_coin)
        - hpp_total = trxs.sum(:hpp_total) - trxs.sum(:hpp_total_coin)
        - tax_total = trxs.sum(:tax) - trxs.sum(:tax_coin)

        td.number #{number_with_delimiter(cash_total.to_i, delimiter: ".", separator: ",")}
        td.number #{number_with_delimiter(debit_total.to_i, delimiter: ".", separator: ",")}
        td.number #{number_with_delimiter(credit_total.to_i, delimiter: ".", separator: ",")}
        td.number #{number_with_delimiter(qris_total.to_i, delimiter: ".", separator: ",")}
        td.number #{number_with_delimiter(grand_total.to_i, delimiter: ".", separator: ",")}
        - if current_user.level != "super_visi"
          td.number #{number_with_delimiter( (grand_total-hpp_total-tax_total).to_i, delimiter: ".", separator: ",")}

  br
  hr
  br

h2
  | CANDY DREAM
- stores = Store.where.not(store_type: "warehouse")
- stores = [current_user.store] if !isCandyDream
- stores.each do |store|
  - trxs = @transactions.where(store: store)
  - trx_last_timestamp = "Tidak ada transaksi"
  - trx_last_timestamp = trxs.order("created_at DESC").first.created_at if trxs.present?

  table#items
    tr colspan="5"
    - total_coins = 0
    th colspan="3"
      | #{store.name.upcase} ( #{trx_last_timestamp} ) 
    tr
      th Kasir
      th Koin Terjual
      th Total
    - User.where(id: trxs.pluck(:user_id).uniq).each do |user|
      - cashier_trxs = trxs.where(user: user)
      - next if cashier_trxs.empty?
      tr
        td #{user.name.camelize}
        td.number #{number_with_delimiter( cashier_trxs.sum(:quantity_coin).to_i, delimiter: ".", separator: ",")}
        td.number #{number_with_delimiter( cashier_trxs.sum(:grand_total_coin).to_i, delimiter: ".", separator: ",")}
    tr
      td 
      td.number #{number_with_delimiter( (trxs.sum(:quantity_coin)).to_i, delimiter: ".", separator: ",")}
      td.number #{number_with_delimiter( (trxs.sum(:grand_total_coin)).to_i, delimiter: ".", separator: ",")}


- if isFinance
  br
  hr
  br
  h2
    | LAPORAN IN-OUT #{@end.to_date}
  table#items
    tr
      td colspan="5" style="font-weight: bold; text-align: center"
        | PENJUALAN
    tr style="text-align: center"
      td
        b Toko
      td
        b Omzet
      td
        b Pajak Keluaran
      td 
        b Profit Bersih
    
    - omzet = 0
    - pajak = 0
    - profits = 0 
    - @profits.each do |profit|
      tr style="text-align: right"
        td style="text-align: left" #{profit[0]}
        td.number #{number_with_delimiter(profit[1].to_i, delimiter: ".")}
        td.number #{number_with_delimiter(profit[3].to_i, delimiter: ".")}
        td.number #{number_with_delimiter(profit[2].to_i, delimiter: ".")}
        - omzet += profit[1]
        - pajak += profit[3]
        - profits += profit[2]
    tr
      td colspan="4"
    tr style="text-align: right"
      td
      td.number #{number_with_delimiter(omzet.to_i, delimiter: ".")}
      td.number #{number_with_delimiter(pajak.to_i, delimiter: ".")}
      td.number #{number_with_delimiter(profits.to_i, delimiter: ".")}


  table#items
    tr
      td colspan="2" style="font-weight: bold; text-align: center"
        h4 PEMASUKAN
    tr
      td Bonus
      td.number style="text-align: right"
        b #{number_with_delimiter(@bonus.to_i, delimiter: ".")}
    tr
      td Lainnya
      td.number style="text-align: right"
        b #{number_with_delimiter(@other_income.to_i, delimiter: ".")}

  table#items
    tr
      td colspan="2" style="font-weight: bold; text-align: center"
        h4 PENGELUARAN
    tr
      td Operasional
      td.number style="text-align: right"
        b #{number_with_delimiter(@operational.to_i, delimiter: ".")}
    tr
      td Biaya Pasti
      td.number style="text-align: right"
        b #{number_with_delimiter(@fix_cost.to_i, delimiter: ".")}

  table#items
    tr
      td Total Pemasukkan
      td.number style="text-align: right"
        b #{number_with_delimiter(@total_income.to_i, delimiter: ".")}
    tr
      td Total Pengeluaran
      td.number style="text-align: right"
        b #{number_with_delimiter(@total_outcome.to_i, delimiter: ".")}
    tr
      td Profit Bersih
      td.number style="text-align: right"
        b #{number_with_delimiter(@total_income.to_i - @total_outcome.to_i, delimiter: ".")}

