#customer
  table#meta
    tr
      td.meta-head Tanggal Buat  
      td
        textarea #{DateTime.now.in_time_zone.to_s}
    tr
      td.meta-head Dibuat Oleh
      td 
        textarea #{current_user.name.to_s} ( #{current_user.store.name} )
    tr
      td.meta-head Tanggal
      td
        b  
          | Rekap Harian - #{@start_day.to_date}

br
br
br


- if current_user.level == "super_visi"
  - trx = @transactions.order("created_at DESC").limit(1).first
  - trx_last_timestamp = "Tidak ada transaksi"
  - trx_last_timestamp = trx.created_at if trx.present?
  h2
    | #{current_user.store.name.upcase} ( #{trx_last_timestamp} )
  table#items
    tr colspan="5"
    tr
      th Kasir
      th Tunai
      th Debit 
      th Kredit
      th Total
      th Profit
    - @cashiers.uniq.each do |cashier_id|
      - cashier = User.find_by(id: cashier_id)
      tr
        td #{cashier.name.upcase}
        - cash = @transactions.where(payment_type: "CASH", user: cashier).sum(:grand_total)
        td #{number_with_delimiter( cash.to_i, delimiter: ".", separator: ",")}
        - debit = @transactions.where(payment_type: "DEBIT", user: cashier).sum(:grand_total)
        - credit = @transactions.where(payment_type: "CREDIT", user: cashier).sum(:grand_total)
        td #{number_with_delimiter( debit.to_i, delimiter: ".", separator: ",")}
        td #{number_with_delimiter( credit.to_i, delimiter: ".", separator: ",")}     
        td #{number_with_delimiter( (debit+cash+credit).to_i, delimiter: ".", separator: ",")}
        - total = debit+cash+credit
        - hpp_total = @transactions.sum(:hpp_total)
        td #{number_with_delimiter( (total-hpp_total).to_i, delimiter: ".", separator: ",")}
    tr
      td 
      - cash_total = @transactions.where(payment_type: "CASH").sum(:grand_total)
      - debit_total = @transactions.where(payment_type: "DEBIT",).sum(:grand_total)
      - credit_total = @transactions.where(payment_type: "CREDIT",).sum(:grand_total)
      - total = cash_total+debit_total+credit_total
      td #{number_with_delimiter( (cash_total).to_i, delimiter: ".", separator: ",")}
      td #{number_with_delimiter( (debit_total).to_i, delimiter: ".", separator: ",")}
      td #{number_with_delimiter( (credit_total).to_i, delimiter: ".", separator: ",")}
      td #{number_with_delimiter( (total).to_i, delimiter: ".", separator: ",")}
      - hpp_total = @transactions.sum(:hpp_total)
      td #{number_with_delimiter( (total-hpp_total).to_i, delimiter: ".", separator: ",")}

- else
  - Store.where(store_type: "retail").each do |store|
    - trx = @transactions.where(store: store).order("created_at DESC").limit(1).first
    - trx_last_timestamp = "Tidak ada transaksi"
    - trx_last_timestamp = trx.created_at if trx.present?
    h3
      | #{store.name.upcase} ( #{trx_last_timestamp} )
    table#items
      tr
        th Kasir
        th Tunai
        th Debit 
        th Kredit
        th Total
        th Profit
      - @cashiers.uniq.each do |cashier_id|
        - cashier = User.find_by(id: cashier_id)
        - next if cashier.store != store
        tr
          td #{cashier.name}
          - cash = @transactions.where(payment_type: "CASH", user: cashier).sum(:grand_total)
          td #{number_with_delimiter( cash.to_i, delimiter: ".", separator: ",")}
          - debit = @transactions.where(payment_type: "DEBIT", user: cashier).sum(:grand_total)
          - credit = @transactions.where(payment_type: "CREDIT", user: cashier).sum(:grand_total)
          td #{number_with_delimiter( (debit).to_i, delimiter: ".", separator: ",")}
          td #{number_with_delimiter( (credit).to_i, delimiter: ".", separator: ",")}
          td #{number_with_delimiter( (debit+cash+credit).to_i, delimiter: ".", separator: ",")}
          - hpp_total = @transactions.where(user: cashier).sum(:hpp_total)
          td #{number_with_delimiter( (credit+debit+cash-hpp_total).to_i, delimiter: ".", separator: ",")}

      tr
        td 
        - cash_total = @transactions.where(store: store).where(payment_type: "CASH").sum(:grand_total)
        - debit_total = @transactions.where(store: store).where(payment_type: "DEBIT",).sum(:grand_total)
        - credit_total = @transactions.where(store: store).where(payment_type: "CREDIT",).sum(:grand_total)
        - total = cash_total+debit_total+credit_total
        td #{number_with_delimiter( (cash_total).to_i, delimiter: ".", separator: ",")}
        td #{number_with_delimiter( (debit_total).to_i, delimiter: ".", separator: ",")}
        td #{number_with_delimiter( (credit_total).to_i, delimiter: ".", separator: ",")}
        td #{number_with_delimiter( (total).to_i, delimiter: ".", separator: ",")}
        - hpp_total = @transactions.where(store: store).sum(:hpp_total)
        td #{number_with_delimiter( (total-hpp_total).to_i.to_i, delimiter: ".", separator: ",")}

    br
    hr

  h3
    | LAPORAN IN-OUT #{@end.to_date}
  table#items
    tr
      td Profit Toko Plered
      td 
        b #{number_with_delimiter(@margin_plered.to_i, delimiter: ".")}
      td Operasional
      td 
        b #{number_with_delimiter(@operational.to_i, delimiter: ".")}
    tr
      td Profit Toko Cirata
      td 
        b #{number_with_delimiter(@margin_cirata.to_i, delimiter: ".")}
      td Biaya Pasti
      td 
        b #{number_with_delimiter(@fix_cost.to_i, delimiter: ".")}
    tr
      td Pendapatan Supplier
      td 
        b #{number_with_delimiter(@supplier_income.to_i, delimiter: ".")}
      td Barang Hangus
      td 
        b #{number_with_delimiter(@losses.to_i, delimiter: ".")}
    tr
      td Bonus
      td
        b #{number_with_delimiter(@bonus.to_i, delimiter: ".")}
      td Pengeluaran Lainnya
      td 
        b #{number_with_delimiter(@other_outcome.to_i, delimiter: ".")}
    tr  
      td Pendapatan Lainnya
      td 
        b #{number_with_delimiter(@other_income.to_i, delimiter: ".")}
      td
      td
    tr
      td colspan="4"
    tr
      td TOTAL
      td 
        b #{number_with_delimiter(@total_income.to_i, delimiter: ".")}
      td
      td
        b #{number_with_delimiter(@total_outcome.to_i, delimiter: ".")}




