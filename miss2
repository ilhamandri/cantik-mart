--> check semua params is required ==> mengurangi error params not found

--> jangan catat activity jika data tidak ada perubahan

--> catat activity jika data dihapus

=====================================================================

--> aktifin cron balance (config/schedule.rb => whenever --update-crontab)

--> aktifin notifikasi (js)

--> set tanggal pehitungan absent + store_id (service/finance)
--> set @@max_complain ==> complains

======================================================================

--> recap untuk bulanan --> klik bulanan --> grand_total_before = 0

======================================================================

--> jumlah promo yang terpakai untuk setiap toko

--> print struk

--> konten di home untuk setiap level

--> cek semua notifikasi
	* payment
	* due date
	* confirm order / transfer					

--> di order terima , step input ke 5

======================================================================
PENDING

--> perubahan harga
	* CETAK
		- price tag (zebra)




ssh root@193.168.195.145 -p 22
tmux attach -t 0







sudo -u postgres psql
postgres

DROP DATABASE cantik_mart;
CREATE DATABASE cantik_mart;

DROP DATABASE cantik_mart_local;
CREATE DATABASE cantik_mart_local;

\q

rails db:migrate
rails c
Supplier.create name: "Supplier 1", address: "BANDUNG", phone: "123123123"
Store.create name:"Store Bandung", cash: 10000000, equity: 10000000
User.create name:"USER 1", email: "admin@pardev.id", password: "admin123", level: 1, store: Store.first 
Store.create name:"Store Bandung 2", cash: 10000000, equity: 10000000
User.create name:"USER 2", email: "admin2@pardev.id", password: "admin123", level: 1, store: Store.second 
Department.create name: "Snack"
ItemCat.create department: Department.first, name: "CABE"


localhost:3000/controllers
localhost:3000/items


StoreItem.delete_all
TransactionItem.delete_all
Transaction.delete_all
ReturItem.delete_all
Retur.delete_all
TransferItem.delete_all
Transfer.delete_all
OrderItem.delete_all
Order.delete_all
Debt.delete_all
CashFlow.delete_all
Receivable.delete_all

StoreItem.update_all(stock: 0)
Store.update_all(cash: 5000000000, equity: 5000000000)










binding port 3000 -> 80